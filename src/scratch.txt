
import { Router,CanActivate,ActivatedRouteSnapshot,RouterStateSnapshot,Params } from '@angular/router';
import { environment } from '../environments/environment';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { Observable } from 'rxjs/Observable';
import { Injectable } from '@angular/core';
import { isNullOrUndefined } from 'util';

import * as firebase from 'firebase';

/**
 * https://firebase.google.com/docs/auth/web/auth-state-persistence
 */
@Injectable()
export class AccountGuard implements CanActivate
{
  /*
   * https://angular.io/guide/router#milestone-5-route-guards
   * https://medium.com/@ryanchenkie_40935/angular-authentication-using-route-guards-bf7a4ca13ae3
   *
   * https://firebase.google.com/docs/auth/web/password-auth
   * https://firebase.google.com/docs/reference/js/firebase.auth.Auth#signInWithEmailAndPassword
   */

  private _signedin = new BehaviorSubject<boolean>( false );
  readonly signedin = this._signedin.asObservable();

  private _signinerror = new BehaviorSubject<string>( null );
  readonly signinerror = this._signinerror.asObservable();

  private unsubscribes: any[] = [];

  constructor( private router:Router ) {
    console.log( 'AccountGuard' );
    // firebase.auth().onAuthStateChanged(user => this.onAuthStateChanged( user ) );
  }

  /**
   *
   * @param {ActivatedRouteSnapshot} route
   * @param {RouterStateSnapshot} snapshot
   * @returns {Observable<boolean> | Promise<boolean> | boolean}
   */
  canActivate( route:ActivatedRouteSnapshot,snapshot:RouterStateSnapshot ) : Observable<boolean> | Promise<boolean> | boolean {
    console.log( 'AccountGuard.canActivate ' + snapshot.url );

    firebase.auth().currentUser; // tslint:disable-line
    return new Promise( resolve => {
      const unsubscribe = firebase.auth().onAuthStateChanged(user => {
        console.log( 'AccountGuard.canActivate.onAuthStateChanged' );
        const validuser = this.validate( user );
        if ( validuser ) {
          this.destination();
        } else {
          this.router.navigate([ 'sign-in' ],{ queryParams: { destination:snapshot.url } } );
        }
        this.unsubscribe();
        resolve( validuser );
      } );
      this.unsubscribes.push( unsubscribe );
    } );
  }

  /**
   *
   * @param {string} email
   * @param {string} password
   */
  signIn( email:string,password:string ) {
    firebase.auth().signInWithEmailAndPassword( email,password ).catch(error => this.onRejected( error ) );
    const unsubscribe = firebase.auth().onAuthStateChanged(user => {
      console.log( 'AccountGuard.signIn.onAuthStateChanged' );
      this.validate( user );
      this.unsubscribe();
    } );
    this.unsubscribes.push( unsubscribe );
  }

  getOwnerId() : string {
    const user = firebase.auth().currentUser;
    if ( isNullOrUndefined( user ) ) {
      return null;
    }
    return user.uid;
  }

  getEMail() : string {
    const user = firebase.auth().currentUser;
    if ( isNullOrUndefined( user ) ) {
      return null;
    }
    return user.email;
  }

  /**
   *
   */
  signOut() {
    firebase.auth().signOut().catch(error => this.onRejected( error ) );
    const unsubscribe = firebase.auth().onAuthStateChanged(user => {
      console.log( 'AccountGuard.signOut.onAuthStateChanged' );
      this.validate( user );
      this.unsubscribe();
    } );
    this.unsubscribes.push( unsubscribe );
  }

  /********************************************************************************************************************/

  private validate( user ) : boolean {
      const validuser = !isNullOrUndefined( user );
      this._signedin.next( validuser );
      return validuser;
  }

  private destination() {
    const snapshoturl = this.router.routerState.snapshot.url;
    const url = new URL( 'me:' + decodeURIComponent( snapshoturl ) );
    if ( '/sign-in' === url.pathname ) {
      const destination = url.searchParams.get( 'destination' );
      const destinationurl = new URL( 'me:'+destination );
      const destinationpath = destinationurl.pathname.replace('/','' );
      const query = ''+destinationurl.searchParams as string;
      const map : { [key:string]:any } = {};
      query.split('&' ).forEach((pair) => {
        const name = pair.split( '=' )[ 0 ];
        const value = pair.split( '=' )[ 1 ];
        map[ name ] = value;
      } );
      if ( destinationpath && destinationpath !== 'null' && destinationpath !== '/null' ) {
        this.router.navigate([ destinationpath ],{ queryParams:map } );
      } else {
        this.router.navigate([ 'home' ] );
      }
    }
  }

  private unsubscribe() {
    this.unsubscribes.forEach(u => u() );
    this.unsubscribes = [];
  }

  // private onAuthStateChanged( user ) {
  //   console.log( 'AccountGuard.onAuthStateChanged ' + user );
  //
  //   const validuser = !isNullOrUndefined( user );
  //
  //   this._signedin.next( validuser );
  //
  //   if ( !validuser ) {
  //     console.log( 'INVALID USER @ ' + this.router.url );
  //     const forced = (this.router.url !== '/') && !this.router.url.startsWith( '/sign-in' );
  //     if ( forced ) {
  //       this.router.navigate([ 'sign-in' ] );
  //     }
  //   } else {
  //     const snapshoturl = this.router.routerState.snapshot.url;
  //     const url = new URL( 'me:' + decodeURIComponent( snapshoturl ) );
  //     if ( '/sign-in' === url.pathname ) {
  //       const destination = url.searchParams.get( 'destination' );
  //       const destinationurl = new URL( 'me:'+destination );
  //       const destinationpath = destinationurl.pathname.replace('/','' );
  //       const query = ''+destinationurl.searchParams as string;
  //       const map : { [key:string]:any } = {};
  //       query.split('&' ).forEach((pair) => {
  //         const name = pair.split( '=' )[ 0 ];
  //         const value = pair.split( '=' )[ 1 ];
  //         map[ name ] = value;
  //       } );
  //       if ( destinationpath && destinationpath !== 'null' && destinationpath !== '/null' ) {
  //         this.router.navigate([ destinationpath ],{ queryParams:map } );
  //       } else {
  //         this.router.navigate([ 'home' ] );
  //       }
  //     } else {
  //       this.router.navigate([ 'home' ] );
  //     }
  //   }
  // }

  private onRejected( error ) {
    this._signinerror.next( error.code );
  }
}
