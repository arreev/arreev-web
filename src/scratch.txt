
import { AfterViewInit,Component,Input,OnDestroy,OnInit,ViewEncapsulation } from '@angular/core';
import { Group } from '../../model/group';

@Component({
  selector: 'app-group-persons',
  templateUrl: './persons.component.html',
  styleUrls: ['./persons.component.css'],
  animations: [],
  encapsulation: ViewEncapsulation.Emulated
})
export class PersonsComponent implements OnInit,AfterViewInit,OnDestroy
{
  @Input() ownerid: string;
  @Input() groupid: string;

  constructor( ) {}

  ngOnInit(): void { this._ngOnInit(); }
  ngAfterViewInit(): void { this._ngAfterViewInit(); }

  ngOnDestroy(): void { this._ngOnDestroy(); }

  /********************************************************************************************************************/

  private _ngOnInit(): void {

  }

  private _ngAfterViewInit(): void {}

  private _ngOnDestroy(): void {}
}




  private getPlace( latitude:number,longitude:number ) {
    const request = {
      location: { lat:latitude,lng:longitude },
      radius: 25,
      rankBy: google.maps.places.RankBy.DISTANCE
    };

    this.places.nearbySearch( request,( results,status ) => {
      console.log( 'nearbySearch ' + latitude + ',' + longitude + ' ' + Math.sqrt(latitude*latitude + longitude*longitude ) );
      let _showwaypointnewname = null;
      let _showwaypointnewaddress = null;
      if ( status === google.maps.places.PlacesServiceStatus.OK ) {
        let distance = 100000.0;
        for ( const r of results ) {
          const lat = r.geometry.location.lat();
          const lng = r.geometry.location.lng();
          if ( (lat === latitude) && (lng === longitude) ) { console.log( 'skip ' + r.name ); continue; }
          const d = Math.sqrt( lat*lat + lng*lng );
          console.log( r.name + ' ' + d );
          if ( d < distance ) {
            _showwaypointnewname = r.name;
            _showwaypointnewaddress = r.vicinity;
            distance = d;
          }
        }
      }
      setTimeout(() => {
        console.log( 'SHOW IT!' );
        this.showwaypointnewname = _showwaypointnewname;
        this.showwaypointnewaddress = _showwaypointnewaddress;
        this.showwaypointnewlat = latitude;
        this.showwaypointnewlng = longitude;
        this.showwaypointnew = true;
        this.changedetector.detectChanges();
      },100 );
    } );
  }



  // private markersBegEndFor( routevm:RouteVM ) {
  //   this.overlays = [];
  //
  //   const _overlays: any[] = [];
  //
  //   /*
  //    * begAddress
  //    */
  //   const begrequest = { query: routevm.begAddress };
  //   this.places.textSearch( begrequest,( begresults,begstatus ) => {
  //     if ( begstatus === google.maps.places.PlacesServiceStatus.OK ) {
  //       for ( const r of begresults ) {
  //         const marker = new google.maps.Marker();
  //         marker.setPosition( { lat:r.geometry.location.lat(),lng:r.geometry.location.lng() } );
  //         marker.setTitle( r.name );
  //         marker.setClickable( true );
  //         _overlays.push( marker );
  //         routevm.begAddressMarker = marker;
  //         break;
  //       }
  //       /*
  //        * endAddress
  //        */
  //       const endrequest = { query: routevm.endAddress };
  //       this.places.textSearch( endrequest,( endresults,endstatus ) => {
  //         if ( endstatus === google.maps.places.PlacesServiceStatus.OK ) {
  //           for ( const r of endresults ) {
  //             const marker = new google.maps.Marker();
  //             marker.setPosition( { lat:r.geometry.location.lat(),lng:r.geometry.location.lng() } );
  //             marker.setTitle( r.name );
  //             marker.setClickable( true );
  //             _overlays.push( marker );
  //             routevm.endAddressMarker = marker;
  //             break;
  //           }
  //           const bounds = new google.maps.LatLngBounds();
  //           _overlays.forEach(marker => {
  //             const position = marker.getPosition();
  //             const lat = position.lat();
  //             const lng = position.lng();
  //             if ( (lat !== 0) && (lng !== 0) ) {
  //               bounds.extend( position );
  //             }
  //           } );
  //           // _overlays.push(
  //           //   new google.maps.Polyline( { path: [ routevm.begAddressMarker.getPosition(),routevm.endAddressMarker.getPosition() ], geodesic: true, strokeColor: '#FF0000', strokeOpacity: 0.5, strokeWeight: 2 } )
  //           // );
  //           this.overlays = _overlays;
  //           setTimeout(() => { this.map.fitBounds( bounds ); },250 );
  //         }
  //       } );
  //     }
  //   } );
  // }


  <app-routes-waypoint-new *ngIf="showwaypointnew"
                           [index]=waypoints.length"
                           [routeid]="selectedroute.id"
                           [name]="showwaypointnewname"
                           [type]="showwaypointnewtype"
                           [address]="showwaypointnewaddress"
                           [lat]="showwaypointnewlat"
                           [lng]="showwaypointnewlng"

                           [places]="places"

                           (finished)="onFinishedWaypointNew($event)"></app-routes-waypoint-new>
